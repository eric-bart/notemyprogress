{"version":3,"sources":["../src/grades.js"],"names":["define","Vue","Vuetify","Axios","Moment","Pagination","ChartDynamic","PageHeader","EmailForm","HelpDialog","init","content","use","component","vue","delimiters","el","vuetify","data","strings","groups","userid","courseid","timezone","render_has","profile_render","loading","errors","pages","grades","grade_items_average_colors","item_grades_details_colors","item_grades_distribution_colors","default_category","average_categories","average_data","selected_items","item_details","grade_item_title","grade_item_details_categories","grade_item_details_data","grade_item_distribution_categories","grade_item_distribution_data","selected_item","grade_item_users","selected_users","dialog","modulename","moduleid","email_strings","help_dialog","help_contents","beforeMount","categories","length","calculate_chart_items_average","items","item","find_first_grade_item","update_detail_charts","mounted","document","querySelector","style","display","methods","get_help_content","contents","title","section_help_title","description","section_help_description","change_category","build_grade_items_average_chart","chart","type","backgroundColor","fontFamily","text","colors","xAxis","legend","enabled","plotOptions","series","cursor","point","events","click","position","x","tooltip","shared","formatter","points","value","y","count","gradecount","name","view_details","average","students_label","grades_tooltip_students","grades_tooltip_student","isInt","toFixed","grademax","grades_tooltip_average","grades_tooltip_grade","student_count","yAxis","allowDecimals","max","labels","format","grades_yaxis_title","build_item_grades_details_chart","category","key","itemname","maxgrade","grade","colorByPoint","build_item_grades_distribution_chart","grades_distribution_yaxis_title","prefix","grades_distribution_tooltip_prefix","suffix","grades_distribution_tooltip_suffix","send_mail","students_text","student_text","stacking","borderWidth","pointPadding","groupPadding","column","subject","subject_prefix","marker","lineWidth","values","forEach","push","average_percentage","itemmodule","coursemoduleid","calculate_chart_item_grade_detail","calculate_chart_item_grades_distribution","item_data","grades_best_grade","maxrating","grades_average_grade","grades_worst_grade","minrating","greater","grades_greater_than","smaller","grades_smaller_than","users","ranges","limit","weight","min","range","index","rawgrade","user","label","i","n","update_dialog","open_chart_help","grade_items_average_help_title","grade_items_average_help_description_p1","grade_items_average_help_description_p2","grade_items_average_help_description_p3","item_grades_details_help_title","item_grades_details_help_description_p1","item_grades_details_help_description_p2","item_grades_distribution_help_title","item_grades_distribution_help_description_p1","item_grades_distribution_help_description_p2","item_grades_distribution_help_description_p3","update_help_dialog","get_timezone","information","ss_change_timezone"],"mappings":"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","sourcesContent":["define([\"local_fliplearning/vue\",\r\n        \"local_fliplearning/vuetify\",\r\n        \"local_fliplearning/axios\",\r\n        \"local_fliplearning/moment\",\r\n        \"local_fliplearning/pagination\",\r\n        \"local_fliplearning/chartdynamic\",\r\n        \"local_fliplearning/pageheader\",\r\n        \"local_fliplearning/emailform\",\r\n        \"local_fliplearning/helpdialog\",\r\n    ],\r\n    function(Vue, Vuetify, Axios, Moment, Pagination, ChartDynamic, PageHeader, EmailForm, HelpDialog) {\r\n        \"use strict\";\r\n\r\n        function init(content) {\r\n            // console.log(content);\r\n            Vue.use(Vuetify);\r\n            Vue.component('pagination', Pagination);\r\n            Vue.component('chart', ChartDynamic);\r\n            Vue.component('pageheader', PageHeader);\r\n            Vue.component('emailform', EmailForm);\r\n            Vue.component('helpdialog', HelpDialog);\r\n            let vue = new Vue({\r\n                delimiters: [\"[[\", \"]]\"],\r\n                el: \"#grades\",\r\n                vuetify: new Vuetify(),\r\n                data() {\r\n                    return {\r\n                        strings : content.strings,\r\n                        groups : content.groups,\r\n                        userid : content.userid,\r\n                        courseid : content.courseid,\r\n                        timezone : content.timezone,\r\n                        render_has : content.profile_render,\r\n                        loading : false,\r\n                        errors : [],\r\n                        pages : content.pages,\r\n\r\n                        grades: content.grades,\r\n                        grade_items_average_colors: content.grade_items_average_colors,\r\n                        item_grades_details_colors: content.item_grades_details_colors,\r\n                        item_grades_distribution_colors: content.item_grades_distribution_colors,\r\n                        default_category: null,\r\n                        average_categories: [],\r\n                        average_data: [],\r\n                        selected_items: [],\r\n                        item_details: [],\r\n\r\n                        grade_item_title: \"\",\r\n                        grade_item_details_categories: [],\r\n                        grade_item_details_data: [],\r\n\r\n                        grade_item_distribution_categories: [],\r\n                        grade_item_distribution_data: [],\r\n\r\n                        selected_item: null,\r\n\r\n                        grade_item_users: null,\r\n                        selected_users: [],\r\n                        dialog : false,\r\n                        modulename : \"\",\r\n                        moduleid : false,\r\n                        email_strings: content.strings.email_strings,\r\n\r\n                        help_dialog: false,\r\n                        help_contents: [],\r\n                    }\r\n                },\r\n                beforeMount(){\r\n                    if (this.grades.categories.length) {\r\n                        this.default_category = this.grades.categories[0];\r\n                        this.calculate_chart_items_average(this.default_category.items);\r\n                        let item = this.find_first_grade_item(this.default_category.items);\r\n                        this.update_detail_charts(item);\r\n                    };\r\n                },\r\n                mounted(){\r\n                    document.querySelector(\"#sessions-loader\").style.display = \"none\";\r\n                    document.querySelector(\"#grades\").style.display = \"block\";\r\n                },\r\n                methods : {\r\n                    get_help_content(){\r\n                        let contents = [];\r\n                        contents.push({\r\n                            title: this.strings.section_help_title,\r\n                            description: this.strings.section_help_description,\r\n                        });\r\n                        return contents;\r\n                    },\r\n\r\n                    change_category(items) {\r\n                        this.calculate_chart_items_average(items);\r\n                        let item = this.find_first_grade_item(items);\r\n                        this.update_detail_charts(item);\r\n                    },\r\n\r\n                    build_grade_items_average_chart() {\r\n                        let chart = new Object();\r\n                        chart.chart = {\r\n                            type: 'column',\r\n                            backgroundColor: null,\r\n                            style: {fontFamily: 'poppins'},\r\n                        };\r\n                        chart.title = {\r\n                            text: null\r\n                        };\r\n                        chart.colors = this.grade_items_average_colors;\r\n                        chart.xAxis = {\r\n                            categories: this.average_categories\r\n                        };\r\n                        chart.legend = {\r\n                            enabled: false\r\n                        };\r\n                        chart.plotOptions = {\r\n                            series: {\r\n                                cursor: 'pointer',\r\n                                point: {\r\n                                    events: {\r\n                                        click: function () {\r\n                                            let position = this.x;\r\n                                            let item = vue.selected_items[position];\r\n                                            vue.update_detail_charts(item);\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        };\r\n                        chart.tooltip = {\r\n                            shared: true,\r\n                            formatter: function() {\r\n                                let position = this.points[0].point.x;\r\n                                let value = this.y;\r\n                                let item = vue.selected_items[position];\r\n                                let count = item.gradecount;\r\n                                let name = this.x;\r\n                                let view_details = vue.strings.view_details;\r\n                                let average = Number(item.average);\r\n                                let students_label = vue.strings.grades_tooltip_students;\r\n                                if (count == 1) {\r\n                                    students_label = vue.strings.grades_tooltip_student;\r\n                                }\r\n                                value = vue.isInt(value) ? value : value.toFixed(2);\r\n                                average = vue.isInt(average) ? average : average.toFixed(2);\r\n                                let grademax = item.grademax;\r\n                                let text = '<b>' + name + '<b> <br/>' +\r\n                                    vue.strings.grades_tooltip_average + ': ' + average + ' (' + value + ' %)<br/>' +\r\n                                    vue.strings.grades_tooltip_grade + ': ' + grademax + '<br/>' +\r\n                                    count + ' ' + students_label + ' ' + vue.grades.student_count + '<br/>' +\r\n                                    '<i>' + view_details + '</i>';\r\n                                return text;\r\n                            }\r\n                        };\r\n                        chart.yAxis = [{\r\n                            allowDecimals: false,\r\n                            max: 100,\r\n                            labels: {\r\n                                format: '{value} %',\r\n                            },\r\n                            title: {\r\n                                text: this.strings.grades_yaxis_title,\r\n                            }\r\n                        }];\r\n                        chart.series = [{\r\n                            data: this.average_data,\r\n                        }];\r\n                        return chart;\r\n                    },\r\n\r\n                    build_item_grades_details_chart() {\r\n                        let chart = new Object();\r\n                        chart.chart = {\r\n                            type: 'bar',\r\n                            backgroundColor: null,\r\n                            style: {fontFamily: 'poppins'},\r\n                        };\r\n                        chart.title = {\r\n                            text: null,\r\n                        };\r\n                        chart.colors = this.item_grades_details_colors;\r\n                        chart.xAxis = {\r\n                            type: 'category',\r\n                        };\r\n                        chart.legend = {\r\n                            enabled: false\r\n                        };\r\n                        chart.tooltip = {\r\n                            shared: true,\r\n                            formatter: function() {\r\n                                let category = this.points[0].key;\r\n                                let name = vue.selected_item.itemname;\r\n                                let maxgrade = vue.selected_item.grademax;\r\n                                let grade = this.y;\r\n                                grade = vue.isInt(grade) ? grade : grade.toFixed(2);\r\n                                let text = '<b>' + name + '<b> <br/>' +\r\n                                    category + ': ' + grade + '/' + maxgrade + '<br/>';\r\n                                return text;\r\n                            }\r\n                        };\r\n                        chart.yAxis = [{\r\n                            title: {\r\n                                enabled: false,\r\n                            }\r\n                        }];\r\n                        chart.series = [{\r\n                            colorByPoint: true,\r\n                            data: this.grade_item_details_data,\r\n                        }];\r\n                        return chart;\r\n                    },\r\n\r\n                    build_item_grades_distribution_chart() {\r\n                        let chart = new Object();\r\n                        chart.chart = {\r\n                            backgroundColor: null,\r\n                            style: {fontFamily: 'poppins'},\r\n                        };\r\n                        chart.title = {\r\n                            text: null,\r\n                        };\r\n                        chart.colors = this.item_grades_distribution_colors;\r\n                        chart.xAxis = {\r\n                            categories: this.grade_item_distribution_categories\r\n                        };\r\n                        chart.yAxis = [{\r\n                            title: {\r\n                                text: this.strings.grades_distribution_yaxis_title,\r\n                            },\r\n                            allowDecimals: false,\r\n                        }];\r\n                        chart.legend = {\r\n                            enabled: false\r\n                        };\r\n                        chart.tooltip = {\r\n                            formatter: function() {\r\n                                let prefix = vue.strings.grades_distribution_tooltip_prefix;\r\n                                let suffix = vue.strings.grades_distribution_tooltip_suffix;\r\n                                let send_mail = vue.strings.send_mail;\r\n                                let name = this.x;\r\n                                let value = this.y;\r\n                                let students_label = vue.strings.students_text;\r\n                                if (value == 1) {\r\n                                    students_label = vue.strings.student_text;\r\n                                }\r\n                                let text = '<b>' + prefix + ': </b> '+ name + ' <br/>'\r\n                                    + value + ' ' + students_label + ' ' + suffix + ' <br/>'\r\n                                    + '<i>' + send_mail + '</i>';\r\n                                return text;\r\n                            }\r\n                        };\r\n                        chart.plotOptions = {\r\n                            series: {\r\n                                stacking: 'normal',\r\n                                borderWidth: 1,\r\n                                pointPadding: 0,\r\n                                groupPadding: 0,\r\n                            },\r\n                            column:{\r\n                                point:{\r\n                                    events: {\r\n                                        click: function () {\r\n                                            let position = this.x;\r\n                                            vue.selected_users = vue.grade_item_users[position];\r\n                                            vue.email_strings.subject = vue.email_strings.subject_prefix\r\n                                                + \" - \" + vue.selected_item.itemname;\r\n                                            vue.dialog = true;\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        };\r\n                        chart.series = [{\r\n                            type: 'column',\r\n                            data: this.grade_item_distribution_data\r\n                        }, {\r\n                            type: 'spline',\r\n                            data: this.grade_item_distribution_data,\r\n                            marker: {\r\n                                lineWidth: 1,\r\n                            }\r\n                        }];\r\n                        return chart;\r\n                    },\r\n\r\n                    calculate_chart_items_average(items) {\r\n                        let values = [];\r\n                        let categories = [];\r\n                        items.forEach(item => {\r\n                            values.push(item.average_percentage);\r\n                            categories.push(item.itemname);\r\n                        });\r\n                        this.average_categories = categories;\r\n                        this.average_data = values;\r\n                        this.selected_items = items;\r\n                    },\r\n\r\n                    update_detail_charts (item) {\r\n                        this.modulename = item.itemmodule;\r\n                        this.moduleid = item.coursemoduleid;\r\n                        this.grade_item_title = item.itemname;\r\n                        this.calculate_chart_item_grade_detail(item);\r\n                        this.calculate_chart_item_grades_distribution(item);\r\n                    },\r\n\r\n                    calculate_chart_item_grade_detail(item) {\r\n                        this.selected_item = item;\r\n                        let item_data = [{\r\n                            name: this.strings.grades_best_grade,\r\n                            y: Number(item.maxrating) || 0\r\n                        },{\r\n                            name: this.strings.grades_average_grade,\r\n                            y: Number(item.average) || 0\r\n                        }, {\r\n                            name: this.strings.grades_worst_grade,\r\n                            y: Number(item.minrating) || 0\r\n                        }];\r\n                        this.grade_item_details_data = item_data;\r\n                    },\r\n\r\n                    calculate_chart_item_grades_distribution(item) {\r\n                        let greater = this.strings.grades_greater_than;\r\n                        let smaller = this.strings.grades_smaller_than;\r\n                        let categories = [\r\n                            `${greater} 90%`,\r\n                            `${greater} 80%`,\r\n                            `${greater} 70%`,\r\n                            `${greater} 60%`,\r\n                            `${greater} 50%`,\r\n                            `${smaller} 50%`];\r\n                        let values = [0, 0, 0, 0, 0, 0];\r\n                        let users = [[], [], [], [], [], []];\r\n                        if (item) {\r\n                            let weights = [0.9, 0.8, 0.7, 0.6, 0.5, 0];\r\n                            let ranges = [];\r\n                            let grademax = item.grademax;\r\n                            let limit = grademax;\r\n                            weights.forEach(weight => {\r\n                                let grade = grademax * weight;\r\n                                ranges.push({ max: limit, min: grade, count: 0});\r\n                                limit = grade - 0.1;\r\n                            });\r\n\r\n                            item.grades.forEach(grade => {\r\n                                ranges.forEach((range, index) => {\r\n                                    if (grade.rawgrade >= range.min && grade.rawgrade <= range.max) {\r\n                                        range.count++;\r\n                                        users[index].push(grade.user);\r\n                                    }\r\n                                });\r\n                            });\r\n\r\n                            values = [];\r\n                            ranges.forEach((range, index) => {\r\n                                let max = this.isInt(range.max) ? range.max : range.max.toFixed(1);\r\n                                let min = this.isInt(range.min) ? range.min : range.min.toFixed(1);\r\n                                let label = `${max} - ${min}<br/>${categories[index]}`;\r\n                                categories[index] = label;\r\n                                values.push(range.count);\r\n                            });\r\n                        }\r\n                        this.grade_item_users = users;\r\n                        this.grade_item_distribution_categories = categories,\r\n                        this.grade_item_distribution_data = values;\r\n                    },\r\n\r\n                    find_first_grade_item(items) {\r\n                        let item;\r\n                        if (items.length) {\r\n                            let count = items.length;\r\n                            for (let i = 0; i < count; i++) {\r\n                                if (items[i].maxrating > 0) {\r\n                                    item = items[i];\r\n                                    break;\r\n                                }\r\n                            }\r\n                            if (!item) {\r\n                                item = items[0];\r\n                            }\r\n                        }\r\n                        return item;\r\n                    },\r\n\r\n                    isInt(n) {\r\n                        return n % 1 === 0;\r\n                    },\r\n\r\n                    update_dialog (value) {\r\n                        this.dialog = value;\r\n                    },\r\n\r\n                    open_chart_help(chart) {\r\n                        let contents = [];\r\n                        if (chart == \"grade_items_average\") {\r\n                            contents.push({\r\n                                title: this.strings.grade_items_average_help_title,\r\n                                description: this.strings.grade_items_average_help_description_p1,\r\n                            });\r\n                            contents.push({\r\n                                description: this.strings.grade_items_average_help_description_p2,\r\n                            });\r\n                            contents.push({\r\n                                description: this.strings.grade_items_average_help_description_p3,\r\n                            });\r\n                        } else if (chart == \"item_grades_details\") {\r\n                            contents.push({\r\n                                title: this.strings.item_grades_details_help_title,\r\n                                description: this.strings.item_grades_details_help_description_p1,\r\n                            });\r\n                            contents.push({\r\n                                description: this.strings.item_grades_details_help_description_p2,\r\n                            });\r\n                        } else if (chart == \"item_grades_distribution\") {\r\n                            contents.push({\r\n                                title: this.strings.item_grades_distribution_help_title,\r\n                                description: this.strings.item_grades_distribution_help_description_p1,\r\n                            });\r\n                            contents.push({\r\n                                description: this.strings.item_grades_distribution_help_description_p2,\r\n                            });\r\n                            contents.push({\r\n                                description: this.strings.item_grades_distribution_help_description_p3,\r\n                            });\r\n                        }\r\n                        this.help_contents = contents;\r\n                        if (this.help_contents.length) {\r\n                            this.help_dialog = true;\r\n                        }\r\n                    },\r\n\r\n                    update_help_dialog (value) {\r\n                        this.help_dialog = value;\r\n                    },\r\n\r\n                    get_timezone(){\r\n                        let information = `${this.strings.ss_change_timezone} ${this.timezone}`\r\n                        return information;\r\n                    },\r\n                }\r\n            })\r\n        }\r\n\r\n        return {\r\n            init : init\r\n        };\r\n    });"],"file":"grades.min.js"}
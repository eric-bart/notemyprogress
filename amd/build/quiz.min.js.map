{"version":3,"sources":["../src/quiz.js"],"names":["define","Vue","Vuetify","Axios","Moment","Pagination","ChartDynamic","PageHeader","HelpDialog","init","content","use","component","vue","delimiters","el","vuetify","data","strings","groups","userid","courseid","timezone","render_has","profile_render","loading","errors","pages","quiz","questions_attempts_colors","hardest_questions_colors","default_quiz","attempts_categories","attempts_series","attempts_questions","hardest_categories","hardest_series","hardest_questions","help_dialog","help_contents","beforeMount","length","attempts","calculate_questions_attempts","mounted","document","querySelector","style","display","methods","get_help_content","contents","title","section_help_title","description","section_help_description","get_quiz_info_text1","text","questions_number","details","questions","questions_label","questions_text","question_text","quiz_info_text","get_quiz_info_text2","attempts_number","doing_text","doing_text_plural","doing_text_singular","students_number","users","students_label","students_text","student_text","build_questions_attempts_chart","chart","type","backgroundColor","fontFamily","colors","xAxis","categories","yAxis","min","allowDecimals","questions_attempts_yaxis_title","tooltip","formatter","question_name","x","attemps","y","total_attemps","total","percentage","Math","round","series_name","series","name","attempt_preffix","attempts_text","charAt","toUpperCase","slice","attempt_label","of_conector","review_question","attempt_text","plotOptions","column","stacking","cursor","point","events","click","question","id","url","M","cfg","wwwroot","window","open","build_hardest_questions_chart","legend","enabled","position","question_info","serie_name","value","ha","to","hardest_questions_yaxis_title","labels","format","cont","ql","correct","partcorrect","incorr","gaveup","needgrade","hardest","co","pc","ic","ga","ng","forEach","gradedright","mangrright","gradedpartial","mangrpartial","gradedwrong","mangrwrong","mangaveup","needsgrading","finished","manfinished","push","qu","pe","correct_attempt","partcorrect_attempt","incorrect_attempt","blank_attempt","needgraded_attempt","hardest_data","sort","compare_hardest","element","update_interactions","week","action","weekcode","profile","method","params","then","response","status","ok","reset_graphs","error_messages","error_network","catch","api_error_network","finally","a","b","open_chart_help","questions_attempts_help_title","questions_attempts_help_description_p1","questions_attempts_help_description_p2","questions_attempts_help_description_p3","hardest_questions_help_title","hardest_questions_help_description_p1","hardest_questions_help_description_p2","hardest_questions_help_description_p3","update_help_dialog","get_timezone","information","ss_change_timezone"],"mappings":"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","sourcesContent":["define([\"local_fliplearning/vue\",\r\n        \"local_fliplearning/vuetify\",\r\n        \"local_fliplearning/axios\",\r\n        \"local_fliplearning/moment\",\r\n        \"local_fliplearning/pagination\",\r\n        \"local_fliplearning/chartdynamic\",\r\n        \"local_fliplearning/pageheader\",\r\n        \"local_fliplearning/helpdialog\",\r\n    ],\r\n    function(Vue, Vuetify, Axios, Moment, Pagination, ChartDynamic, PageHeader, HelpDialog) {\r\n        \"use strict\";\r\n\r\n        function init(content) {\r\n            // console.log(content);\r\n            Vue.use(Vuetify);\r\n            Vue.component('pagination', Pagination);\r\n            Vue.component('chart', ChartDynamic);\r\n            Vue.component('pageheader', PageHeader);\r\n            Vue.component('helpdialog', HelpDialog);\r\n            let vue = new Vue({\r\n                delimiters: [\"[[\", \"]]\"],\r\n                el: \"#quiz\",\r\n                vuetify: new Vuetify(),\r\n                data() {\r\n                    return {\r\n                        strings : content.strings,\r\n                        groups : content.groups,\r\n                        userid : content.userid,\r\n                        courseid : content.courseid,\r\n                        timezone : content.timezone,\r\n                        render_has : content.profile_render,\r\n                        loading : false,\r\n                        errors : [],\r\n                        pages : content.pages,\r\n\r\n                        quiz : content.quiz,\r\n                        questions_attempts_colors: content.questions_attempts_colors,\r\n                        hardest_questions_colors: content.hardest_questions_colors,\r\n                        default_quiz: null,\r\n                        attempts_categories: [],\r\n                        attempts_series: [],\r\n                        attempts_questions: [],\r\n                        hardest_categories: [],\r\n                        hardest_series: [],\r\n                        hardest_questions: [],\r\n\r\n                        help_dialog: false,\r\n                        help_contents: [],\r\n                    }\r\n                },\r\n                beforeMount(){\r\n                    if (this.quiz.length) {\r\n                        this.default_quiz = this.quiz[0].attempts;\r\n                        this.calculate_questions_attempts(this.default_quiz);\r\n                    };\r\n                },\r\n                mounted(){\r\n                    document.querySelector(\"#sessions-loader\").style.display = \"none\";\r\n                    document.querySelector(\"#quiz\").style.display = \"block\";\r\n                },\r\n                methods : {\r\n                    get_help_content(){\r\n                        let contents = [];\r\n                        contents.push({\r\n                            title: this.strings.section_help_title,\r\n                            description: this.strings.section_help_description,\r\n                        });\r\n                        return contents;\r\n                    },\r\n\r\n                    get_quiz_info_text1() {\r\n                        let text = '';\r\n                        if (this.default_quiz) {\r\n                            let questions_number = this.default_quiz.details.questions;\r\n                            let questions_label = this.strings.questions_text;\r\n                            if (questions_number == 1) {\r\n                                questions_label = this.strings.question_text;\r\n                            }\r\n                            text = `* ${this.strings.quiz_info_text} ${questions_number} ${questions_label}`;\r\n                        }\r\n                        return text;\r\n                    },\r\n\r\n                    get_quiz_info_text2() {\r\n                        let text = '';\r\n                        if (this.default_quiz) {\r\n                            let attempts_number = this.default_quiz.details.attempts;\r\n                            let doing_text = this.strings.doing_text_plural;\r\n                            if (attempts_number == 1) {\r\n                                doing_text = this.strings.doing_text_singular;\r\n                            }\r\n                            let students_number = this.default_quiz.details.users;\r\n                            let students_label = this.strings.students_text;\r\n                            if (students_number == 1) {\r\n                                students_label = this.strings.student_text;\r\n                            }\r\n                            text = `* ${attempts_number} ${doing_text} ${students_number} ${students_label}`;\r\n                        }\r\n                        return text;\r\n                    },\r\n\r\n                    build_questions_attempts_chart() {\r\n                        let chart = new Object();\r\n                        chart.chart = {\r\n                            type: 'column',\r\n                            backgroundColor: null,\r\n                            style: {fontFamily: 'poppins'},\r\n                        };\r\n                        chart.title = {\r\n                            text: null\r\n                        };\r\n                        chart.colors = this.questions_attempts_colors;\r\n                        chart.xAxis = {\r\n                            categories: this.attempts_categories\r\n                        };\r\n                        chart.yAxis = [{\r\n                            min: 0,\r\n                            allowDecimals: false,\r\n                            title: {\r\n                                text: this.strings.questions_attempts_yaxis_title\r\n                            }\r\n                        }];\r\n                        chart.tooltip = {\r\n                            formatter: function() {\r\n                                let question_name = this.x;\r\n                                let attemps = this.y;\r\n                                let total_attemps = this.total;\r\n                                let percentage = Math.round(Number(this.percentage));\r\n                                let series_name = this.series.name;\r\n                                let attempt_preffix = vue.strings.attempts_text;\r\n                                attempt_preffix = attempt_preffix.charAt(0).toUpperCase() + attempt_preffix.slice(1);\r\n                                let attempt_label = vue.strings.attempts_text;\r\n                                let of_conector = vue.strings.of_conector;\r\n                                let review_question = vue.strings.review_question;\r\n                                if (attemps == 1) {\r\n                                    attempt_label = vue.strings.attempt_text;\r\n                                }\r\n                                let text = '<b>' + question_name + ': </b>' + attempt_preffix + ' ' + series_name + '<br/>' +\r\n                                           attemps + ' ' + attempt_label + ' ' + of_conector + ' ' + total_attemps +\r\n                                            ' (' + percentage + '%)' + '<br/>' + review_question;\r\n\r\n                                return text;\r\n                            }\r\n                        };\r\n                        chart.plotOptions = {\r\n                            column: {\r\n                                stacking: 'normal'\r\n                            },\r\n                            series: {\r\n                                cursor: 'pointer',\r\n                                point: {\r\n                                    events: {\r\n                                        click: function () {\r\n                                            let question = vue.attempts_questions[this.x];\r\n                                            let id = question.id;\r\n                                            let url = M.cfg.wwwroot + '/question/preview.php?id='+id+'&courseid='+vue.courseid;\r\n                                            window.open(url, '_blank', 'top=50,left=50,width=900,height=600');\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        };\r\n                        chart.series = this.attempts_series;\r\n                        return chart;\r\n                    },\r\n\r\n                    build_hardest_questions_chart() {\r\n                        let chart = new Object();\r\n                        chart.chart = {\r\n                            type: 'column',\r\n                            backgroundColor: null,\r\n                            style: {fontFamily: 'poppins'},\r\n                        };\r\n                        chart.title = {\r\n                            text: null,\r\n                        };\r\n                        chart.colors = this.hardest_questions_colors;\r\n                        chart.xAxis = {\r\n                            categories: this.hardest_categories,\r\n                        };\r\n                        chart.legend = {\r\n                            enabled: false\r\n                        };\r\n                        chart.tooltip = {\r\n                            formatter: function() {\r\n                                let position = this.point.x;\r\n                                let question_info = vue.hardest_questions[position];\r\n                                let question_name = this.x;\r\n                                let serie_name = this.series.name;\r\n                                let value = this.y;\r\n                                let attempt_label = vue.strings.attempts_text;\r\n                                let of_conector = vue.strings.of_conector;\r\n                                let review_question = vue.strings.review_question;\r\n                                if (question_info.ha == 1) {\r\n                                    attempt_label = vue.strings.attempt_text;\r\n                                }\r\n                                let text = '<b>' + question_name + ': </b>' + serie_name + '<br/>' +\r\n                                            question_info.ha + ' ' + attempt_label + ' ' + of_conector + ' '\r\n                                            + question_info.to + ' (' + value + '%)' + '<br/>' + review_question;\r\n                                return text;\r\n                            }\r\n                        };\r\n                        chart.yAxis = [{\r\n                            min: 0,\r\n                            allowDecimals: false,\r\n                            title: {\r\n                                text: this.strings.hardest_questions_yaxis_title\r\n                            },\r\n                            labels: {\r\n                                format: '{value} %',\r\n                            },\r\n                        }];\r\n                        chart.plotOptions = {\r\n                            series: {\r\n                                cursor: 'pointer',\r\n                                    point: {\r\n                                    events: {\r\n                                        click: function () {\r\n                                            let question = vue.hardest_questions[this.x];\r\n                                            let id = question.id;\r\n                                            let url = M.cfg.wwwroot + '/question/preview.php?id='+id+'&courseid='+vue.courseid;\r\n                                            window.open( url, '_blank', 'top=50,left=50,width=900,height=600');\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        };\r\n                        chart.series = this.hardest_series;\r\n                        return chart;\r\n                    },\r\n\r\n                    calculate_questions_attempts(quiz) {\r\n                        let questions = quiz.questions;\r\n                        let attempts_categories = [];\r\n                        let cont = 1, ql = \"\";\r\n\r\n                        let correct = [], partcorrect = [], incorr = [], gaveup = [], needgrade = [], hardest = [],\r\n                            attempts_questions = [];\r\n                        let co, pc, ic, ga, ng, to, ha = 0;\r\n\r\n                        questions.forEach(question => {\r\n                            co, pc, ic, ga, ng, to = 0;\r\n                            co = (question.gradedright || 0) + (question.mangrright || 0);\r\n                            pc = (question.gradedpartial || 0) + (question.mangrpartial || 0);\r\n                            ic = (question.gradedwrong || 0) + (question.mangrwrong || 0);\r\n                            ga = (question.gaveup || 0) + (question.mangaveup || 0);\r\n                            ng = (question.needsgrading || 0) + (question.mangaveup || 0) +\r\n                                (question.finished || 0) + (question.manfinished || 0);\r\n\r\n                            correct.push(co);\r\n                            partcorrect.push(pc);\r\n                            incorr.push(ic);\r\n                            gaveup.push(ga);\r\n                            needgrade.push(ng);\r\n\r\n                            ql = 'P' + cont;\r\n                            ha = pc + ic + ga;\r\n                            to = co + pc + ic + ga + ng;\r\n                            hardest.push({ id: question.id, qu: ql, ha: ha, to: to, pe: Math.round((ha * 100) / to), });\r\n                            attempts_categories.push(ql);\r\n                            attempts_questions.push(question);\r\n                            cont++;\r\n                        });\r\n\r\n                        let attempts_series = [];\r\n                        attempts_series.push({\r\n                            name: this.strings.correct_attempt,\r\n                            data: correct\r\n                        });\r\n                        attempts_series.push({\r\n                            name: this.strings.partcorrect_attempt,\r\n                            data: partcorrect\r\n                        });\r\n                        attempts_series.push({\r\n                            name: this.strings.incorrect_attempt,\r\n                            data: incorr\r\n                        });\r\n                        attempts_series.push({\r\n                            name: this.strings.blank_attempt,\r\n                            data: gaveup\r\n                        });\r\n                        attempts_series.push({\r\n                            name: this.strings.needgraded_attempt,\r\n                            data: needgrade\r\n                        });\r\n\r\n                        let hardest_categories = [], hardest_data = [], hardest_questions = [];\r\n                        hardest.sort(this.compare_hardest);\r\n                        hardest.forEach(element => {\r\n                            if (element.pe) {\r\n                                hardest_categories.push(element.qu);\r\n                                hardest_data.push(element.pe);\r\n                                hardest_questions.push(element);\r\n                            }\r\n                        });\r\n\r\n                        let hardest_series = [{\r\n                            name: this.strings.hardest_questions_yaxis_title,\r\n                            data: hardest_data\r\n                        }];\r\n\r\n                        this.attempts_categories = attempts_categories;\r\n                        this.attempts_series = attempts_series;\r\n                        this.attempts_questions = attempts_questions;\r\n                        this.hardest_categories = hardest_categories;\r\n                        this.hardest_series = hardest_series;\r\n                        this.hardest_questions = hardest_questions;\r\n                    },\r\n\r\n                    update_interactions(week){\r\n                        this.loading = true;\r\n                        this.errors = [];\r\n                        let data = {\r\n                            action : \"quiz\",\r\n                            userid : this.userid,\r\n                            courseid : this.courseid,\r\n                            weekcode : week.weekcode,\r\n                            profile : this.render_has,\r\n                        }\r\n                        Axios({\r\n                            method:'get',\r\n                            url: M.cfg.wwwroot + \"/local/fliplearning/ajax.php\",\r\n                            params : data,\r\n                        }).then((response) => {\r\n                            if (response.status == 200 && response.data.ok) {\r\n                                this.quiz = response.data.data.quiz;\r\n                                if (this.quiz.length) {\r\n                                    this.default_quiz = this.quiz[0].attempts;\r\n                                    this.calculate_questions_attempts(this.default_quiz);\r\n                                } else {\r\n                                    this.reset_graphs();\r\n                                };\r\n                            } else {\r\n                                this.error_messages.push(this.strings.error_network);\r\n                            }\r\n                        }).catch((e) => {\r\n                            this.errors.push(this.strings.api_error_network);\r\n                        }).finally(() => {\r\n                            this.loading = false;\r\n                        });\r\n                        return this.data;\r\n                    },\r\n\r\n                    reset_graphs () {\r\n                        this.default_quiz = null;\r\n                        this.attempts_categories = [];\r\n                        this.attempts_series = [];\r\n                        this.attempts_questions = [];\r\n                        this.hardest_categories = [];\r\n                        this.hardest_series = [];\r\n                        this.hardest_questions = [];\r\n                    },\r\n\r\n                    compare_hardest(a, b) {\r\n                        if (a.pe > b.pe) {\r\n                            return -1;\r\n                        }\r\n                        if (a.pe < b.pe) {\r\n                            return 1;\r\n                        }\r\n                        return 0;\r\n                    },\r\n\r\n                    open_chart_help(chart) {\r\n                        let contents = [];\r\n                        if (chart == \"questions_attempts\") {\r\n                            contents.push({\r\n                                title: this.strings.questions_attempts_help_title,\r\n                                description: this.strings.questions_attempts_help_description_p1,\r\n                            });\r\n                            contents.push({\r\n                                description: this.strings.questions_attempts_help_description_p2,\r\n                            });\r\n                            contents.push({\r\n                                description: this.strings.questions_attempts_help_description_p3,\r\n                            });\r\n                        } else if (chart == \"hardest_questions\") {\r\n                            contents.push({\r\n                                title: this.strings.hardest_questions_help_title,\r\n                                description: this.strings.hardest_questions_help_description_p1,\r\n                            });\r\n                            contents.push({\r\n                                description: this.strings.hardest_questions_help_description_p2,\r\n                            });\r\n                            contents.push({\r\n                                description: this.strings.hardest_questions_help_description_p3,\r\n                            });\r\n                        }\r\n                        this.help_contents = contents;\r\n                        if (this.help_contents.length) {\r\n                            this.help_dialog = true;\r\n                        }\r\n                    },\r\n\r\n                    update_help_dialog (value) {\r\n                        this.help_dialog = value;\r\n                    },\r\n\r\n                    get_timezone(){\r\n                        let information = `${this.strings.ss_change_timezone} ${this.timezone}`\r\n                        return information;\r\n                    },\r\n                }\r\n            })\r\n        }\r\n\r\n        return {\r\n            init : init\r\n        };\r\n    });"],"file":"quiz.min.js"}